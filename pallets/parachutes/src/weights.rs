
//! Autogenerated weights for `pallet_parachutes`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2024-12-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `penguin`, CPU: `Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/solochain-template-node
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet
// pallet-parachutes
// --extrinsic=*
// --steps
// 50
// --repeat
// 20
// --template=./scripts/frame-weight-template.hbs
// --output
// ./pallets/parachutes/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_parachutes`.
pub trait WeightInfo {
	fn create_loft_id() -> Weight;
	fn set_rigger() -> Weight;
	fn in_service() -> Weight;
	fn rig() -> Weight;
	fn repair_weight() -> Weight;
	fn retire() -> Weight;
}

/// Weights for `pallet_parachutes` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Parachutes::Riggers` (r:1 w:1)
	/// Proof: `Parachutes::Riggers` (`max_values`: None, `max_size`: Some(2400073), added: 2402548, mode: `MaxEncodedLen`)
	fn create_loft_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `2403538`
		// Minimum execution time: 23_043_000 picoseconds.
		Weight::from_parts(24_496_000, 2403538)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Parachutes::Riggers` (r:1 w:1)
	/// Proof: `Parachutes::Riggers` (`max_values`: None, `max_size`: Some(2400073), added: 2402548, mode: `MaxEncodedLen`)
	fn set_rigger() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `86`
		//  Estimated: `2403538`
		// Minimum execution time: 23_833_000 picoseconds.
		Weight::from_parts(24_346_000, 2403538)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Parachutes::Riggers` (r:1 w:1)
	/// Proof: `Parachutes::Riggers` (`max_values`: None, `max_size`: Some(2400073), added: 2402548, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Drogues` (r:1 w:1)
	/// Proof: `Parachutes::Drogues` (`max_values`: None, `max_size`: Some(800077), added: 802552, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::InServiceNonce` (r:1 w:1)
	/// Proof: `Parachutes::InServiceNonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::InService` (r:0 w:1)
	/// Proof: `Parachutes::InService` (`max_values`: None, `max_size`: Some(94), added: 2569, mode: `MaxEncodedLen`)
	fn in_service() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `86`
		//  Estimated: `2403538`
		// Minimum execution time: 37_062_000 picoseconds.
		Weight::from_parts(37_565_000, 2403538)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Parachutes::Riggers` (r:1 w:1)
	/// Proof: `Parachutes::Riggers` (`max_values`: None, `max_size`: Some(2400073), added: 2402548, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Drogues` (r:1 w:0)
	/// Proof: `Parachutes::Drogues` (`max_values`: None, `max_size`: Some(800077), added: 802552, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Mains` (r:1 w:1)
	/// Proof: `Parachutes::Mains` (`max_values`: None, `max_size`: Some(800077), added: 802552, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::MainsRiggedNonce` (r:1 w:1)
	/// Proof: `Parachutes::MainsRiggedNonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::MainsRigged` (r:0 w:1)
	/// Proof: `Parachutes::MainsRigged` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	fn rig() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `269`
		//  Estimated: `2403538`
		// Minimum execution time: 53_673_000 picoseconds.
		Weight::from_parts(62_434_000, 2403538)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Parachutes::Riggers` (r:1 w:1)
	/// Proof: `Parachutes::Riggers` (`max_values`: None, `max_size`: Some(2400073), added: 2402548, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Reserves` (r:1 w:1)
	/// Proof: `Parachutes::Reserves` (`max_values`: None, `max_size`: Some(800077), added: 802552, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::RepairNonce` (r:1 w:1)
	/// Proof: `Parachutes::RepairNonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Repair` (r:0 w:1)
	/// Proof: `Parachutes::Repair` (`max_values`: None, `max_size`: Some(351), added: 2826, mode: `MaxEncodedLen`)
	fn repair_weight() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `209`
		//  Estimated: `2403538`
		// Minimum execution time: 45_796_000 picoseconds.
		Weight::from_parts(47_469_000, 2403538)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Parachutes::Riggers` (r:1 w:1)
	/// Proof: `Parachutes::Riggers` (`max_values`: None, `max_size`: Some(2400073), added: 2402548, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Drogues` (r:1 w:1)
	/// Proof: `Parachutes::Drogues` (`max_values`: None, `max_size`: Some(800077), added: 802552, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::RetireNonce` (r:1 w:1)
	/// Proof: `Parachutes::RetireNonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Retire` (r:0 w:1)
	/// Proof: `Parachutes::Retire` (`max_values`: None, `max_size`: Some(94), added: 2569, mode: `MaxEncodedLen`)
	fn retire() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `206`
		//  Estimated: `2403538`
		// Minimum execution time: 41_296_000 picoseconds.
		Weight::from_parts(42_936_000, 2403538)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Parachutes::Riggers` (r:1 w:1)
	/// Proof: `Parachutes::Riggers` (`max_values`: None, `max_size`: Some(2400073), added: 2402548, mode: `MaxEncodedLen`)
	fn create_loft_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `2403538`
		// Minimum execution time: 23_043_000 picoseconds.
		Weight::from_parts(24_496_000, 2403538)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Parachutes::Riggers` (r:1 w:1)
	/// Proof: `Parachutes::Riggers` (`max_values`: None, `max_size`: Some(2400073), added: 2402548, mode: `MaxEncodedLen`)
	fn set_rigger() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `86`
		//  Estimated: `2403538`
		// Minimum execution time: 23_833_000 picoseconds.
		Weight::from_parts(24_346_000, 2403538)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Parachutes::Riggers` (r:1 w:1)
	/// Proof: `Parachutes::Riggers` (`max_values`: None, `max_size`: Some(2400073), added: 2402548, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Drogues` (r:1 w:1)
	/// Proof: `Parachutes::Drogues` (`max_values`: None, `max_size`: Some(800077), added: 802552, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::InServiceNonce` (r:1 w:1)
	/// Proof: `Parachutes::InServiceNonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::InService` (r:0 w:1)
	/// Proof: `Parachutes::InService` (`max_values`: None, `max_size`: Some(94), added: 2569, mode: `MaxEncodedLen`)
	fn in_service() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `86`
		//  Estimated: `2403538`
		// Minimum execution time: 37_062_000 picoseconds.
		Weight::from_parts(37_565_000, 2403538)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Parachutes::Riggers` (r:1 w:1)
	/// Proof: `Parachutes::Riggers` (`max_values`: None, `max_size`: Some(2400073), added: 2402548, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Drogues` (r:1 w:0)
	/// Proof: `Parachutes::Drogues` (`max_values`: None, `max_size`: Some(800077), added: 802552, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Mains` (r:1 w:1)
	/// Proof: `Parachutes::Mains` (`max_values`: None, `max_size`: Some(800077), added: 802552, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::MainsRiggedNonce` (r:1 w:1)
	/// Proof: `Parachutes::MainsRiggedNonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::MainsRigged` (r:0 w:1)
	/// Proof: `Parachutes::MainsRigged` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	fn rig() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `269`
		//  Estimated: `2403538`
		// Minimum execution time: 53_673_000 picoseconds.
		Weight::from_parts(62_434_000, 2403538)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Parachutes::Riggers` (r:1 w:1)
	/// Proof: `Parachutes::Riggers` (`max_values`: None, `max_size`: Some(2400073), added: 2402548, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Reserves` (r:1 w:1)
	/// Proof: `Parachutes::Reserves` (`max_values`: None, `max_size`: Some(800077), added: 802552, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::RepairNonce` (r:1 w:1)
	/// Proof: `Parachutes::RepairNonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Repair` (r:0 w:1)
	/// Proof: `Parachutes::Repair` (`max_values`: None, `max_size`: Some(351), added: 2826, mode: `MaxEncodedLen`)
	fn repair_weight() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `209`
		//  Estimated: `2403538`
		// Minimum execution time: 45_796_000 picoseconds.
		Weight::from_parts(47_469_000, 2403538)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Parachutes::Riggers` (r:1 w:1)
	/// Proof: `Parachutes::Riggers` (`max_values`: None, `max_size`: Some(2400073), added: 2402548, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Drogues` (r:1 w:1)
	/// Proof: `Parachutes::Drogues` (`max_values`: None, `max_size`: Some(800077), added: 802552, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::RetireNonce` (r:1 w:1)
	/// Proof: `Parachutes::RetireNonce` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Parachutes::Retire` (r:0 w:1)
	/// Proof: `Parachutes::Retire` (`max_values`: None, `max_size`: Some(94), added: 2569, mode: `MaxEncodedLen`)
	fn retire() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `206`
		//  Estimated: `2403538`
		// Minimum execution time: 41_296_000 picoseconds.
		Weight::from_parts(42_936_000, 2403538)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
